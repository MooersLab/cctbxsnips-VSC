{
"millerMtzImports": {
    "prefix": "millerMtzImports",
    "body": placeHolder,
    "caption": "Read a mtz file into a miller array.",
    "scope": "source.python"
},
"millerArrayLabels": {
    "prefix": "millerArrayLabels",
    "body": placeHolder,
    "caption": "Print column labels in a Miller array.",
    "scope": "source.python"
},
"millerArrayWavelengths": {
    "prefix": "millerArrayWavelengths",
    "body": placeHolder,
    "caption": "Print wavelengths of each miller array.",
    "scope": "source.python"
},
"millerArraySources": {
    "prefix": "millerArraySources",
    "body": placeHolder,
    "caption": "Print the source of each miller array.",
    "scope": "source.python"
},
"millerArrayLengths": {
    "prefix": "millerArrayLengths",
    "body": placeHolder,
    "caption": "Print length of miller arrays (i.e., the number of datasets in a mtz file).",
    "scope": "source.python"
},
"millerArraySymmetry": {
    "prefix": "millerArraySymmetry",
    "body": placeHolder,
    "caption": "Print the crystal symmetry of each miller array.",
    "scope": "source.python"
},
"millerArrayHKLs": {
    "prefix": "millerArrayHKLs",
    "body": placeHolder,
    "caption": "Print all of the miller indices for a given Miller array.",
    "scope": "source.python"
},
"millerArrayMethods": {
    "prefix": "millerArrayMethods",
    "body": placeHolder,
    "caption": "Print the available methods for the Miller class.",
    "scope": "source.python"
},
"millerArraydstar": {
    "prefix": "millerArraydstar",
    "body": placeHolder,
    "caption": "Return the resolution range in d* in a specified Miller array.",
    "scope": "source.python"
},
"millerArrayDminDmax": {
    "prefix": "millerArrayDminDmax",
    "body": placeHolder,
    "caption": "Return the resolution range in Angstroms for a Miller array.",
    "scope": "source.python"
},
"millerArrayIsigma
": {
    "prefix": "millerArrayIsigma
",
    "body": placeHolder,
    "caption": "Return the I/sig overall for a given Miller array.",
    "scope": "source.python"
},
"millerArrayCC": {
    "prefix": "millerArrayCC",
    "body": placeHolder,
    "caption": "Return CC one-half sigma tau for a given Miller array.",
    "scope": "source.python"
},
"millerArrayCConeHalf": {
    "prefix": "millerArrayCConeHalf",
    "body": placeHolder,
    "caption": "Return CC one-half for a given Miller array. ",
    "scope": "source.python"
},
"millerArrayBijvoetRatios": {
    "prefix": "millerArrayBijvoetRatios",
    "body": placeHolder,
    "caption": "Print the Bijvoet ratios in a specified Miller array.  May have to average by bin first.",
    "scope": "source.python"
},
"millerArrayMeasurability": {
    "prefix": "millerArrayMeasurability",
    "body": placeHolder,
    "caption": "Return the `measurability` of the anomalous signal in a specified Miller array.",
    "scope": "source.python"
},
"millerArrayAnomalousSignal": {
    "prefix": "millerArrayAnomalousSignal",
    "body": placeHolder,
    "caption": "Return the anomalous signal in a specified Miller array.",
    "scope": "source.python"
},
"millerArrayComprehensiveSummary": {
    "prefix": "millerArrayComprehensiveSummary",
    "body": placeHolder,
    "caption": "Show comprehensive summary for a specified Miller array. ",
    "scope": "source.python"
},
"millerArrayCountBijvoetPairs": {
    "prefix": "millerArrayCountBijvoetPairs",
    "body": placeHolder,
    "caption": "Show number of bijvoet pairs for a specified Miller array.",
    "scope": "source.python"
},
"millerArrayWilsonRatio": {
    "prefix": "millerArrayWilsonRatio",
    "body": placeHolder,
    "caption": "Show wilson ratio of miller array for a specified Miller array. ",
    "scope": "source.python"
},
"millerArrayUnpackIpIn": {
    "prefix": "millerArrayUnpackIpIn",
    "body": placeHolder,
    "caption": "Unpack into I(+) and I(-) for a specified Miller array. ",
    "scope": "source.python"
},
"millerArrayPrintSelectRows": {
    "prefix": "millerArrayPrintSelectRows",
    "body": placeHolder,
    "caption": "Print five rows of the Iobs for a specified Miller array. ",
    "scope": "source.python"
},
"millerArrayExtractIntensities": {
    "prefix": "millerArrayExtractIntensities",
    "body": placeHolder,
    "caption": "Extract just the intensities for a give Miller array and print ten rows of them.",
    "scope": "source.python"
},
"millerArrayPrintntensities": {
    "prefix": "millerArrayPrintntensities",
    "body": placeHolder,
    "caption": "Print all of the intensities for a given Miller array.",
    "scope": "source.python"
},
"millerArrayconvert2mtz": {
    "prefix": "millerArrayconvert2mtz",
    "body": placeHolder,
    "caption": "Convert the miller array into a mtz_dataset and write out as a mtz file.",
    "scope": "source.python"
},
"millerArrayReadMtz": {
    "prefix": "millerArrayReadMtz",
    "body": placeHolder,
    "caption": "Read in the mtz file and print its column labels as a sanity check.",
    "scope": "source.python"
},
"millerArray2Dictionary": {
    "prefix": "millerArray2Dictionary",
    "body": placeHolder,
    "caption": "Set up the arrays as dictionaries",
    "scope": "source.python"
},
"millerArrayDictionaryKeys": {
    "prefix": "millerArrayDictionaryKeys",
    "body": placeHolder,
    "caption": "Print the miller keys() of a miller dictionary.",
    "scope": "source.python"
},
"millerArrayDictPrintColumns": {
    "prefix": "millerArrayDictPrintColumns",
    "body": placeHolder,
    "caption": "Print the column labels of Miller dictionary.",
    "scope": "source.python"
},
"millerArrayBuildFromUnitCell": {
    "prefix": "millerArrayBuildFromUnitCell",
    "body": placeHolder,
    "caption": "Peter Zwart's code for generating the indices for unit cell of given symmetry and dimensions. ",
    "scope": "source.python"
},
"millerArrayMapToASU": {
    "prefix": "millerArrayMapToASU",
    "body": placeHolder,
    "caption": "Map generated reflections to the asu and print.",
    "scope": "source.python"
},
"millerArrayPrintSummary": {
    "prefix": "millerArrayPrintSummary",
    "body": placeHolder,
    "caption": "Read mtz file into a miller array and print summary.",
    "scope": "source.python"
},
"mtzObjectSummary": {
    "prefix": "mtzObjectSummary",
    "body": placeHolder,
    "caption": "Read mtz file into a mtz object and print summary.",
    "scope": "source.python"
},
"millerArrayFromMtz": {
    "prefix": "millerArrayFromMtz",
    "body": placeHolder,
    "caption": "Read mtz file into a Miller array.",
    "scope": "source.python"
},
"millerArrayTruncate": {
    "prefix": "millerArrayTruncate",
    "body": placeHolder,
    "caption": "Read mtz file into a Miller array, truncate, and print summary.",
    "scope": "source.python"
},
"millerArrayDictColumnLabels": {
    "prefix": "millerArrayDictColumnLabels",
    "body": placeHolder,
    "caption": "Print column labels of a Miller array dictionary.",
    "scope": "source.python"
},
"condaInstall": {
    "prefix": "condaInstall",
    "body": placeHolder,
    "caption": "The conda commands to install cctbx with the jupyter notebook, pandas, and xarray.",
    "scope": "source.python"
},
"condaRemove": {
    "prefix": "condaRemove",
    "body": placeHolder,
    "caption": "The conda commands to remove cctbx37 env.",
    "scope": "source.python"
},
"fetchPDB": {
    "prefix": "fetchPDB",
    "body": placeHolder,
    "caption": "Fetch pdb file from RCSB in PDB format.",
    "scope": "source.python"
},
"updateCLT": {
    "prefix": "updateCLT",
    "body": placeHolder,
    "caption": "Update the command line tools for Xcode on Mac OS X. ",
    "scope": "source.python"
},
"extractCrystalSymmetry": {
    "prefix": "extractCrystalSymmetry",
    "body": placeHolder,
    "caption": "Extract crystal symmetry from mtz file.",
    "scope": "source.python"
},
"plotDstarsLogMeans": {
    "prefix": "plotDstarsLogMeans",
    "body": placeHolder,
    "caption": "Generate the list of dstars and logMeans as lists for plotting by matplotlib.",
    "scope": "source.python"
},
"plotDstarsMeasurability": {
    "prefix": "plotDstarsMeasurability",
    "body": placeHolder,
    "caption": "Generate the list of dstars and measurability as lists for plotting by matplotlib.",
    "scope": "source.python"
},
"computeAllMillerIndices": {
    "prefix": "computeAllMillerIndices",
    "body": placeHolder,
    "caption": "Compute all possible Miller indices.",
    "scope": "source.python"
},
"computeAllMillerIndicesASU": {
    "prefix": "computeAllMillerIndicesASU",
    "body": placeHolder,
    "caption": "Compute all possible Miller indices in the ASU.",
    "scope": "source.python"
},
"computeAllMillerIndicesUnitCell": {
    "prefix": "computeAllMillerIndicesUnitCell",
    "body": placeHolder,
    "caption": "Build miller indices given unit cell and resolution limit.",
    "scope": "source.python"
},
"extractReflectionMtzFile": {
    "prefix": "extractReflectionMtzFile",
    "body": placeHolder,
    "caption": "Extract the reflections from a mtz file.",
    "scope": "source.python"
},
"extractReflectionInShell": {
    "prefix": "extractReflectionInShell",
    "body": placeHolder,
    "caption": "Extract the reflections in a shell.",
    "scope": "source.python"
},
"plotRfactorResolutionBin": {
    "prefix": "plotRfactorResolutionBin",
    "body": placeHolder,
    "caption": "Read in a phenix.refine mtz file. It plots the work and free R-factors by resolution bin.",
    "scope": "source.python"
},
"plotFcalcsrResolutionBin": {
    "prefix": "plotFcalcsrResolutionBin",
    "body": placeHolder,
    "caption": "Example of computing Fcalcs and then plotting them by resolution bin. This script uses miller arrays and binner.",
    "scope": "source.python"
},
"plotIntensityResolutionBin": {
    "prefix": "plotIntensityResolutionBin",
    "body": placeHolder,
    "caption": "Miller arrays to plot of bin mean intensity over dstar",
    "scope": "source.python"
},
"cns2mtz": {
    "prefix": "cns2mtz",
    "body": placeHolder,
    "caption": "Miller arrays to convert CNS reflection file into an mtz file",
    "scope": "source.python"
},
"FsigmaFbyabsLindex": {
    "prefix": "FsigmaFbyabsLindex",
    "body": placeHolder,
    "caption": "L-plot",
    "scope": "source.python"
},
"changeMtzColumns": {
    "prefix": "changeMtzColumns",
    "body": placeHolder,
    "caption": "Read in mtz file and write out with fewer columns.",
    "scope": "source.python"
},
"normalizedStructureFactors": {
    "prefix": "normalizedStructureFactors",
    "body": placeHolder,
    "caption": "Calculate quasi-normalized structure factor.",
    "scope": "source.python"
},
"readMtzFile": {
    "prefix": "readMtzFile",
    "body": placeHolder,
    "caption": "Read in a mtz file into a Miller array with iotbx.file_reader.",
    "scope": "source.python"
},
"pattersonContourMap": {
    "prefix": "pattersonContourMap",
    "body": placeHolder,
    "caption": "Read in a mtz file with iotbx.file_reader.",
    "scope": "source.python"
},
"condaInstall2": {
    "prefix": "condaInstall2",
    "body": placeHolder,
    "caption": "The conda commands to remove old env and create a new one for  cctbx. These commands need to be run on the command line.",
    "scope": "source.python"
},
"eigenvalues": {
    "prefix": "eigenvalues",
    "body": placeHolder,
    "caption": "The commands to find the eigenvalues and eigenvectors on a tensor. The code is from a post to cctbxbb on 10 December 2020 by Richard Gildea in a reply to Robert Oeffner about code in cctbx for finding eigenvalues and eigenvectors. Robert was requesting the analog in cctbx to scipy.linalg.eig.",
    "scope": "source.python"
},
"IpIm": {
    "prefix": "IpIm",
    "body": placeHolder,
    "caption": "Scatter plot of I(+) and (I(-). The presence of an anomalous signal is indicated by deviations from x=y.",
    "scope": "source.python"
},
"fetchFASTA": {
    "prefix": "fetchFASTA",
    "body": placeHolder,
    "caption": "Fetch fasta file from RCSB.",
    "scope": "source.python"
},
"fetchXrayCif": {
    "prefix": "fetchXrayCif",
    "body": placeHolder,
    "caption": "Fetch X-ray data from RCSB in mmCIF format.",
    "scope": "source.python"
},
"fetchAtomicCif": {
    "prefix": "fetchAtomicCif",
    "body": placeHolder,
    "caption": "Fetch  atomic coordinates from RCSB in mmCIF format.",
    "scope": "source.python"
},
"symmetryFromPDB": {
    "prefix": "symmetryFromPDB",
    "body": placeHolder,
    "caption": "Print the symmetry from a PDB file.",
    "scope": "source.python"
},
"makeMaps": {
    "prefix": "makeMaps",
    "body": placeHolder,
    "caption": "Read in mtz and pdb file and write map coefficients to a separate mtz file.",
    "scope": "source.python"
},
"testCCTBX": {
    "prefix": "testCCTBX",
    "body": placeHolder,
    "caption": "Enter this snippet on the command line in an empty directory.",
    "scope": "source.python"
},
"condaInstall4Ununtu": {
    "prefix": "condaInstall4Ununtu",
    "body": placeHolder,
    "caption": "Enter this snippet on the command line in an empty directory.",
    "scope": "source.python"
},
"condaListEnvs": {
    "prefix": "condaListEnvs",
    "body": placeHolder,
    "caption": "List the currently available envs. The bang (!) enables running this command in a Juptyer Notebook. Delete the bang to run the command in the terminal.",
    "scope": "source.python"
},
"condaRemoveEnv": {
    "prefix": "condaRemoveEnv",
    "body": placeHolder,
    "caption": "Remove a specified env. The bang (!) enables running this command in a Juptyer Notebook. Delete the bang to run the command in the terminal.",
    "scope": "source.python"
},
"condaInstallCCTBXInsidePyMOL": {
    "prefix": "condaInstallCCTBXInsidePyMOL",
    "body": placeHolder,
    "caption": "Install cctbx inside PyMOL. This protocol worked on a Mac OS.",
    "scope": "source.python"
},
"testCCTBXpython38": {
    "prefix": "testCCTBXpython38",
    "body": placeHolder,
    "caption": "Bash script to test new installation of cctbx with Python3.7 in a conda env.",
    "scope": "source.python"
},
"testCCTBXpython37": {
    "prefix": "testCCTBXpython37",
    "body": placeHolder,
    "caption": "Bash script to test new installation of cctbx with Python3.8 in a conda env.",
    "scope": "source.python"
},
"gemmiInstall": {
    "prefix": "gemmiInstall",
    "body": placeHolder,
    "caption": "Command to install gemmi (https://github.com/project-gemmi/gemmi). Documentation is located here (https://gemmi.readthedocs.io/en/latest/install.html).",
    "scope": "source.python"
},
"fixPermissionsOnMacSDK": {
    "prefix": "fixPermissionsOnMacSDK",
    "body": placeHolder,
    "caption": "Fix permission on MacOS SDK. Adjust the version number of the sdk as needed.",
    "scope": "source.python"
},
"averageB": {
    "prefix": "averageB",
    "body": placeHolder,
    "caption": "Print the average B factor for all atoms.",
    "scope": "source.python"
},
"testCCTBXpython39": {
    "prefix": "testCCTBXpython39",
    "body": placeHolder,
    "caption": "Bash script to test new installation of cctbx with Python3.9 in a conda env.",
    "scope": "source.python"
},
"testCCTBXpython310": {
    "prefix": "testCCTBXpython310",
    "body": placeHolder,
    "caption": "Bash script to test new installation of cctbx with Python3.10 in a conda env.",
    "scope": "source.python"
},
"testCCTBXpython311": {
    "prefix": "testCCTBXpython311",
    "body": placeHolder,
    "caption": "Bash script to test new installation of cctbx with Python3.11 in a conda env.",
    "scope": "source.python"
},
